run-name: ${{ github.actor }} ${{ github.event_name }} for ${{ github.ref }} id ${{ github.run_id }}
name: Code Audit and Tests
on:
  pull_request:
    types: [opened, reopened, synchronize]
jobs:
  code-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        python -m pip install poetry==1.4.2

    - name: Configure poetry
      run: |
        python -m poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --with "code_audit"

    - name: Cache the virtualenv
      uses: actions/cache@v2
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

    - name: Assess imports with isort
      if: always()
      run: |
        poetry run isort $(git ls-files '*.py')

    - name: Assess static typing with mypy
      if: always()
      run: |
        poetry run mypy $(git ls-files '*.py')

    - name: Formatting with blue
      if: always()
      run: |
        poetry run blue . --check
        
    - name: Analyse code with pylint
      if: always()
      run: |
        poetry run pylint $(git ls-files '*.py')

  test-app:
    needs: code-audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore cached virtual environment
        uses: actions/cache@v2
        with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Run basic app tests which do not require anything running.
        if: always()
        run: |
          poetry run pytest ./tests/test_app
