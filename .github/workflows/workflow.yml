name: Code Audit and Tests
on:
  pull_request:
    types: [opened, reopened, synchronize]
jobs:
  code-audit:
    environment: Test_Environment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache venv directory
      uses: actions/cache@v2
      with:
        path: venv
        key: venv-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          venv-

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install poetry==1.4.2
        poetry install -v

    - name: Assess imports with isort
      if: always()
      run: |
        source venv/bin/activate
        poetry run isort $(git ls-files '*.py')

    - name: Assess static typing with mypy
      if: always()
      run: |
        source venv/bin/activate
        poetry run mypy $(git ls-files '*.py')

    - name: Formatting with blue
      if: always()
      run: |
        source venv/bin/activate
        poetry run blue . --check
        
    - name: Analyse code with pylint
      if: always()
      run: |
        source venv/bin/activate
        poetry run pylint $(git ls-files '*.py')
     
  test-app:
    needs: code-audit
    environment: Test_Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore venv directory from cache
        uses: actions/cache@v2
        with:
          path: venv
          key: venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |

      - name: Run tests
        run: |
          source venv/bin/activate
          poetry run pytest ./tests/test_app/

  test-nx:
    needs: code-audit
    environment: Test_Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore venv directory from cache
        uses: actions/cache@v2
        with:
          path: venv
          key: venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |

      - name: Install Networkx dependencies
        run: |
          source venv/bin/activate
          poetry install -v --with "nx"

      - name: Run tests
        run: |
          source venv/bin/activate
          poetry run pytest ./tests/test_nx/

  test-neo4j:
    needs: code-audit
    environment: Test_Environment
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables
        env:
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
        run: |
          echo "NEO4J_USERNAME=neo4j" >> .env
          echo "NEO4J_PASSWORD=${NEO4J_PASSWORD}" >> .env
          echo "NEO4J_URI=${NEO4J_URI}" >> .env

      - name: Start Neo4j service
        run: docker-compose -f docker/docker-compose.dev.yml --env-file .env --detach neo4j up

      - name: Restore venv directory from cache
        uses: actions/cache@v2
        with:
          path: venv
          key: venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |

      - name: Install Neo4j dependencies
        run: |
          source venv/bin/activate
          poetry install -v --with "neo4j"

      - name: Run tests on neo4j database
        if: always()
        run: |
          source venv/bin/activate
          poetry run pytest ./tests/test_neo4j/

  clean-cache:
    needs: [test-app, test-nx, test-neo4j]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH="refs/pull/${{ github.event.pull_request.number }}/merge"

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}